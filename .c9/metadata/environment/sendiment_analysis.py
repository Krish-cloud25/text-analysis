{"filter":false,"title":"sendiment_analysis.py","tooltip":"/sendiment_analysis.py","undoManager":{"mark":2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":28,"column":0},"action":"insert","lines":["from pyspark import SparkContext","from textblob import TextBlob","","# Function to classify sentiment","def get_sentiment(line):","    parts = line.split(\"\\t\")","    if len(parts) < 2:","        return (\"neutral\", 1)  # fallback for malformed lines","    text = parts[1]","    polarity = TextBlob(text).sentiment.polarity","    if polarity > 0:","        return (\"positive\", 1)","    elif polarity < 0:","        return (\"negative\", 1)","    else:","        return (\"neutral\", 1)","","# Set up Spark context","sc = SparkContext(\"local[*]\", \"SentimentAnalysis\")","","# Read the dataset","rdd = sc.textFile(\"dataset_unzipped/SMSSpamCollection\")","","# Apply sentiment analysis and count","sentiment_counts = rdd.map(get_sentiment).reduceByKey(lambda a, b: a + b)","","# Save results","sentiment_counts.saveAsTextFile(\"sentiment_output\")",""],"id":1}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":1},"action":"insert","lines":[" "],"id":2}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":1},"action":"remove","lines":[" "],"id":7}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":9,"column":35},"end":{"row":9,"column":35},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1751722168215,"hash":"d47fea95df0d9bb2a6ba00a9b7da7c6e0ca86058"}